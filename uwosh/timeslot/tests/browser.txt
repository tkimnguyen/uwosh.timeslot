Browser tests for uwosh.timeslot
==========================

Let's import some exceptions we'll need to catch later::

    >>> from AccessControl.unauthorized import Unauthorized
    >>> from mechanize._mechanize import LinkNotFoundError
    
To create a signup sheet we need to login in as a manager and create several
different content types.

We start a test browser::

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> browser.handleErrors = False
    >>> browser.addHeader('Accept-Language', 'en-US')
    >>> self.portal.error_log._ignored_exceptions = ()

We log in::

    >>> browser.open(portal.absolute_url() + '/login_form')
    >>> browser.getLink('Log in').click()
    >>> browser.getControl(name='__ac_name').value = 'test_user_1_'
    >>> browser.getControl(name='__ac_password').value = 'secret'
    >>> browser.getControl(name='submit').click()
    >>> 'You are now logged in' in browser.contents
    True
    
And make ourselves manager::

    >>> self.setRoles(['Manager'])

Let's create a signup sheet::

    >>> url = self.portal.absolute_url()
    >>> browser.open(url)
    >>> browser.open(url + '/createObject?type_name=Signup+Sheet')
    >>> browser.getControl(name='title').value = 'Test Signup Sheet'
    >>> browser.getControl(name='extraFields:list').value = ('phone',)
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True
    >>> signupSheet = self.portal['test-signup-sheet']
    
We'll add a day to it::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/createObject?type_name=Day')
    >>> browser.getControl(name='date_year').value = ['2009',]
    >>> browser.getControl(name='date_month').value = ['10',]
    >>> browser.getControl(name='date_day').value = ['13',]
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True
    >>> day = signupSheet['tuesday-october-13-2009']
 
And to the day we'll add a number of timeslots:

This one shouldn't show up as the date will be before today::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/createObject?type_name=Day')
    >>> browser.getControl(name='date_year').value = ['2009',]
    >>> browser.getControl(name='date_month').value = ['04',]
    >>> browser.getControl(name='date_day').value = ['13',]
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True
 

One with no waiting list and 3 openings::

    >>> url = day.absolute_url()
    >>> browser.open(url + '/createObject?type_name=Time+Slot')
    >>> browser.getControl(name='startTime_hour').value = ['12',]
    >>> browser.getControl(name='startTime_minute').value = ['30',]
    >>> browser.getControl(name='startTime_ampm').value = ['PM',]
    >>> browser.getControl(name='endTime_hour').value = ['03',]
    >>> browser.getControl(name='endTime_minute').value = ['00',]
    >>> browser.getControl(name='endTime_ampm').value = ['PM',]
    >>> browser.getControl(name='maxCapacity').value = '3'
    >>> browser.getControl(name='allowWaitingList:boolean').value = 'off'
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True

Another one with 0 openings and a waiting list::

    >>> browser.open(url + '/createObject?type_name=Time+Slot')
    >>> browser.getControl(name='startTime_hour').value = ['04',]
    >>> browser.getControl(name='startTime_minute').value = ['00',]
    >>> browser.getControl(name='startTime_ampm').value = ['PM',]
    >>> browser.getControl(name='endTime_hour').value = ['05',]
    >>> browser.getControl(name='endTime_minute').value = ['00',]
    >>> browser.getControl(name='endTime_ampm').value = ['PM',]
    >>> browser.getControl(name='maxCapacity').value = '0'
    >>> browser.getControl(name='allowWaitingList:boolean').value = 'on'
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True

Finally, one with 0 openings and no waiting list:: 

    >>> browser.open(url + '/createObject?type_name=Time+Slot')
    >>> browser.getControl(name='startTime_hour').value = ['06',]
    >>> browser.getControl(name='startTime_minute').value = ['00',]
    >>> browser.getControl(name='startTime_ampm').value = ['PM',]
    >>> browser.getControl(name='endTime_hour').value = ['07',]
    >>> browser.getControl(name='endTime_minute').value = ['00',]
    >>> browser.getControl(name='endTime_ampm').value = ['PM',]
    >>> browser.getControl(name='maxCapacity').value = '0'
    >>> browser.getControl(name='allowWaitingList:boolean').value = 'off'
    >>> browser.getControl(name='form_submit').click()
    >>> 'Changes saved.' in browser.contents
    True
     
Now we will publish our signup sheet so Anonymous users can see it
and Authenticated users can signup on it::

    >>> from Products.CMFCore.utils import getToolByName
    >>> portal_workflow = getToolByName(self.portal, 'portal_workflow')
    >>> portal_workflow.doActionFor(signupSheet, 'publish')

We switch to an Anonymous user and attempt to view the page::

    >>> self.setRoles(['Anonymous'])
    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> 'To signup for a spot you will need to <a' and 'login</a> first.'  in browser.contents
    True
    >>> 'Submit' not in browser.contents
    True

Now we make ourselves an Authenticated user::

    >>> self.setRoles(['Authenticated'])

Lets make sure the sheet is accessible by authenticated users, and that it is
displaying the correct times and days::

     >>> url = signupSheet.absolute_url()
     >>> browser.open(url)
     >>> 'Test Signup Sheet' in browser.contents
     True
     >>> 'Monday, April 13, 2009' not in browser.contents
     True
     >>> 'Tuesday, October 13, 2009' in browser.contents
     True
     >>> '12:30 PM - 03:00 PM' in browser.contents
     True
     >>> '4:00 PM - 05:00 PM' in browser.contents
     True
     >>> '6:00 PM - 07:00 PM' in browser.contents
     True

Non-manager users should not have a manager-summary, export-to-csv, clone, or
remove-all-people tab::
    
    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> try:
    ...     browser.getLink('Manager Summary')
    ... except LinkNotFoundError:
    ...     'manager-summary not found'
    'manager-summary not found'
    >>> try:
    ...     browser.getLink('Export to CSV')
    ... except LinkNotFoundError:
    ...     'export-to-csv not found'
    'export-to-csv not found'
    >>> try:
    ...     browser.getLink('Remove All People')
    ... except LinkNotFoundError:
    ...     'remove-all-people not found'
    'remove-all-people not found'

Non-managers should not be able to access any of those four directly either.
An attempt to access them should throw an exception::

    >>> url = signupSheet.absolute_url()
    >>> try:
    ...     browser.open(url + '/manager-summary')
    ... except: 
    ...     'user is unauthorized to access manager-summary'
    'user is unauthorized to access manager-summary'
    >>> try:
    ...     browser.open(url + '/export-to-csv')
    ... except:
    ...     'user is unauthorized to access export-to-csv'
    'user is unauthorized to access export-to-csv'
    >>> try:
    ...     browser.open(url + '/remove-all-people')
    ... except:
    ...     'user is unauthorized to access remove-all-people'
    'user is unauthorized to access remove-all-people'
    >>> url = day.absolute_url()
    >>> try:
    ...     browser.open(url + '/clone')
    ... except:
    ...     'user is unauthorized to access clone'
    'user is unauthorized to access clone'

Any authenticated user should be able to sign up for an available slot::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.getControl(name='slotSelection').value = ('Test Signup Sheet @ Tuesday, October 13, 2009 @ 12:30 PM - 03:00 PM',)
    >>> browser.getControl(name='phone').value = '920-555-1234'
    >>> browser.getControl(name='form.button.submit').click()
    >>> 'Successful Signup' in browser.contents
    True

Because the user is now signed up for 1 slot, they should see "Your Slot" once and an option
to cancel the slot reservation::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.contents.count('Your Slot')
    1
    >>> 'You are signed up for the following slots:' and 'Test Signup Sheet @ Tuesday, October 13, 2009 @ 12:30 PM - 03:00 PM' in browser.contents
    True
    >>> browser.getControl(name='cancelSlots')
    <SubmitControl name='cancelSlots' type='submit'>

A user should have to fill in all the required fields::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.getControl(name='slotSelection').value = ('Test Signup Sheet @ Tuesday, October 13, 2009 @ 04:00 PM - 05:00 PM',)
    >>> browser.getControl(name='form.button.submit').click()
    >>> 'Unsuccessful Signup' in browser.contents
    True
    >>> 'You did not complete the following fields: Phone' in browser.contents
    True

A user should not be able to even select full slot w/o a waiting list::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> try:
    ...     browser.getControl(name='slotSelection').value = ('Test Signup Sheet @ Tuesday, October 13, 2009 @ 05:00 PM - 06:00 PM',)
    ... except:
    ...     'full slot is not selectable'
    'full slot is not selectable'

But a user should be able to be put on the waiting list even when the slot is 'full'::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.getControl(name='slotSelection').value = ('Test Signup Sheet @ Tuesday, October 13, 2009 @ 04:00 PM - 05:00 PM',)
    >>> browser.getControl(name='phone').value = '920-555-1234'
    >>> browser.getControl(name='form.button.submit').click()
    >>> 'Successfully Added to Waiting List' in browser.contents
    True

Now we switch back to being a manager::
    
    >>> self.setRoles(['Manager'])

Now let's make sure that a manager can access the manager summary page::
    
    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.getLink('Manager Summary').click()
    >>> 'Test Signup Sheet - Manager Summary' in browser.contents
    True
    >>> 'Tuesday, October 13, 2009' in browser.contents
    True
    >>> '12:30 PM - 03:00 PM' in browser.contents
    True

And it should show that our test user is signed up for two slots. One waiting one regular::
    
    >>> browser.contents.count('>test_user_1_</a>')
    2
    >>> browser.contents.count('Waiting List')
    1
    >>> browser.contents.count('Signed Up')
    1
    
Now we'll bump our test user from the waiting list to be actually signed up.
After that our test user should be signed up for two slots and waiting on zero::

    >>> person = signupSheet['tuesday-october-13-2009']['04-00-pm-05-00-pm']['test_user_1_']
    >>> portal_workflow.doActionFor(person, 'signup')
    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/manager-summary')
    >>> browser.contents.count('>test_user_1_</a>')
    2
    >>> browser.contents.count('Waiting List')
    0
    >>> browser.contents.count('Signed Up')
    2
    
Export to a comma sperated value file (csv) should work::

    >>> browser.getLink('Export to CSV').click()
    >>> 'SignupSheet,Day,TimeSlot,Name,Status,Email,Extra Info (Phone - Class. - Dept.)' in browser.contents
    True
    >>> '"Tuesday, October 13, 2009",04:00 PM - 05:00 PM,test_user_1_,Signed Up,,920-555-1234' in browser.contents
    True
    >>> '"Tuesday, October 13, 2009",12:30 PM - 03:00 PM,test_user_1_,Signed Up,,920-555-1234' in browser.contents
    True

Clicking on Clone should make as many copies as you want of the original day
after stripping out all the currently signed up users::
    
    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/tuesday-october-13-2009')
    >>> browser.getLink('Clone').click()
    >>> browser.getControl(name='form.numToCreate').value = '4'
    >>> browser.getControl(name='form.actions.clone').click()
    >>> 'Cloning successful' in browser.contents
    True

Since we made four copies there should be a total of five days, by default it should skip the weekends,
and there should still be only two slots for which our user is signed up for.::
    
    >>> browser.open(url + '/manager-summary')
    >>> 'Tuesday, October 13, 2009' in browser.contents
    True
    >>> 'Wednesday, October 14, 2009' in browser.contents
    True
    >>> 'Thursday, October 15, 2009' in browser.contents
    True
    >>> 'Friday, October 16, 2009' in browser.contents
    True
    >>> 'Monday, October 19, 2009' in browser.contents
    True
    >>> browser.contents.count('>test_user_1_</a>')
    2

After we add contact information to the signup sheet it should show up when viewing it::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> 'If you have any questions please contact:' and 'Marshall Scorcio' and 'email@example.com' and '123-456-7890' not in browser.contents
    True
    >>> browser.open(url + '/edit')
    >>> browser.getControl(name='contactInfo:lines').value = 'Marshall Scorcio\nemail@example.com\n123-456-7890'
    >>> browser.getControl(name='form_submit').click()
    >>> browser.open(url)
    >>> 'If you have any questions please contact:' and 'Marshall Scorcio' and 'email@example.com' and '123-456-7890' in browser.contents
    True

There should be an entry for the ScheduleViewer role on the sharing tab::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/@@sharing')
    >>> 'uwosh.timeslot: Can view schedule' in browser.contents
    True

Let's switch to the ScheduleViewer role::

    >>> self.setRoles(['uwosh_timeslot_ScheduleViewer'])

And make sure we can view the manager summary and export to csv::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url)
    >>> browser.getLink('Manager Summary').click()
    >>> 'Test Signup Sheet - Manager Summary' in browser.contents
    True
    >>> 'Tuesday, October 13, 2009' in browser.contents
    True
    >>> '12:30 PM - 03:00 PM' in browser.contents
    True

    >>> browser.getLink('Export to CSV').click()
    >>> 'SignupSheet,Day,TimeSlot,Name,Status,Email,Extra Info (Phone - Class. - Dept.)' in browser.contents
    True
    >>> '"Tuesday, October 13, 2009",04:00 PM - 05:00 PM,test_user_1_,Signed Up,,920-555-1234' in browser.contents
    True
    >>> '"Tuesday, October 13, 2009",12:30 PM - 03:00 PM,test_user_1_,Signed Up,,920-555-1234' in browser.contents
    True

Let's switch back to being an authenticated user::

     >>> self.setRoles(['Authenticated'])

The "Cancel Selected Slots" button should let our happy users cancel any slot that
they have reserved::

     >>> url = signupSheet.absolute_url()
     >>> browser.open(url)
     >>> browser.getControl(name='selectedSlot').value = ['Test Signup Sheet @ Tuesday, October 13, 2009 @ 12:30 PM - 03:00 PM',]
     >>> browser.getControl(name='cancelSlots').click()
     >>> browser.open(url)
     >>> browser.contents.count('Your Slot')
     1

We hastily switch back to being a Manager::

   >>> self.setRoles(['Manager'])

And to wrap it up, we'll use the remove-all-people shortcut to reset our sheet. Afterward there
should be no one signed up for anything::

    >>> url = signupSheet.absolute_url()
    >>> browser.open(url + '/remove-all-people')
    >>> browser.getControl(name='form.actions.52656d6f766520416c6c2050656f706c65').click()
    >>> browser.open(url + '/manager-summary')
    >>> browser.contents.count('>test_user_1_</a>')
    0
    >>> browser.contents.count('Waiting List')
    0
    >>> browser.contents.count('Signed Up')
    0
    >>> browser.contents.count('No one is signed up')
    15

The End.
